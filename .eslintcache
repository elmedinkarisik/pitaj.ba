[{"/home/elmedin/pitaj.ba/src/index.js":"1","/home/elmedin/pitaj.ba/src/app.js":"2","/home/elmedin/pitaj.ba/src/lib/firebase.js":"3","/home/elmedin/pitaj.ba/src/components/question.js":"4","/home/elmedin/pitaj.ba/src/components/navbar.js":"5","/home/elmedin/pitaj.ba/src/components/post-new-question.js":"6","/home/elmedin/pitaj.ba/src/components/vote-buttons.js":"7"},{"size":291,"mtime":1611705352558,"results":"8","hashOfConfig":"9"},{"size":987,"mtime":1613162369621,"results":"10","hashOfConfig":"9"},{"size":607,"mtime":1610673431372,"results":"11","hashOfConfig":"9"},{"size":1137,"mtime":1613162593582,"results":"12","hashOfConfig":"9"},{"size":534,"mtime":1611671935543,"results":"13","hashOfConfig":"9"},{"size":2553,"mtime":1612631214761,"results":"14","hashOfConfig":"9"},{"size":3115,"mtime":1613162184953,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1dsntvx",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"18"},"/home/elmedin/pitaj.ba/src/index.js",[],["36","37"],"/home/elmedin/pitaj.ba/src/app.js",["38","39"],"import { Container, Flex, Spinner, VStack } from \"@chakra-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport Question from \"./components/question\";\nimport db from \"./lib/firebase\";\nimport Navbar from \"./components/navbar\";\n\nconst App = () => {\n  const [questions, setQuestions] = useState([]);\n\n  useEffect(() => {\n    db.collection(\"questions\")\n      .orderBy(\"createdAt\", \"desc\")\n      .onSnapshot((querySnapshot) => {\n        const _questions = [];\n\n        querySnapshot.forEach((doc) => {\n          _questions.push({\n            id: doc.id,\n            ...doc.data(),\n          });\n        });\n\n        setQuestions(_questions);\n      });\n  }, []);\n\n  return (\n    <>\n      <Navbar />\n      <Container maxW=\"md\" centerContent p={8}>\n        <VStack spacing={8} w=\"100%\">\n          {questions.map((question) => (\n            <Question question={question} key={question.id} />\n          ))}\n        </VStack>\n      </Container>\n    </>  \n  );\n};\n\nexport default App;","/home/elmedin/pitaj.ba/src/lib/firebase.js",[],"/home/elmedin/pitaj.ba/src/components/question.js",["40"],"import { Box, HStack, Text } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport VoteButtons from \"./vote-buttons\";\nimport {\n    Popover,\n    PopoverTrigger,\n    PopoverContent,\n    PopoverHeader,\n    PopoverBody,\n    PopoverFooter,\n    PopoverArrow,\n    PopoverCloseButton,\n    Button\n  } from \"@chakra-ui/react\"\n\nconst Question = ({ question }) => {\n    return (\n        <HStack key={question.id} w=\"100%\" alignItems=\"flex-start\">\n            <VoteButtons question = {question} />\n            <Box bg=\"gray.100\" p={4} rounded=\"md\" w=\"100%\">\n                <Text>{question.title}</Text>\n                <Popover>\n                <PopoverTrigger>\n                    <Button>Trigger</Button>\n                </PopoverTrigger>\n                <PopoverContent>\n                    <PopoverArrow />\n                    <PopoverCloseButton />\n                    <PopoverHeader>Confirmation!</PopoverHeader>\n                    <PopoverBody>Are you sure you want to have that milkshake?</PopoverBody>\n                </PopoverContent>\n                </Popover>\n            </Box>\n        </HStack>\n    );\n};\n\nexport default Question;","/home/elmedin/pitaj.ba/src/components/navbar.js",[],"/home/elmedin/pitaj.ba/src/components/post-new-question.js",["41","42"],"import {\n    Button,\n    FormControl,\n    FormLabel,\n    Textarea,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n    HStack,\n    useDisclosure,\n} from \"@chakra-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport db from \"../lib/firebase\";\n\nconst PostNewQuestion = () => {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const [title, setTitle] = useState(\"\");\n    const [isSaving, setSaving] = useState(false);\n\n    const handleSubmit = async () => {\n        const date = new Date();\n\n        await db.collection(\"questions\").add({\n            title,\n            upVotesCount: 0,\n            downVotesCount: 0,\n            createdAt: date.toUTCString(),\n            updatedAt: date.toUTCString()\n        });\n\n        onClose();\n        setTitle(\"\");\n    };\n\n    return (\n        <>\n            <Button onClick = {onOpen} colorScheme = \"blue\">\n                Postavi pitanje\n            </Button>\n\n            <Modal onClose = {onClose} isOpen = {isOpen} isCentered>\n                <ModalOverlay>\n                    <ModalContent>\n                        <ModalHeader>Postavi pitanje</ModalHeader>\n                        <ModalCloseButton />\n                        <ModalBody>\n                            <FormControl id = \"question-title\">\n                                <FormLabel>Naslov pitanja</FormLabel>\n                                <Textarea\n                                    type = \"question-title\"\n                                    value = {title}\n                                    onChange = {(e) => setTitle(e.target.value)}\n                                />\n                            </FormControl>\n                        </ModalBody>\n                        <ModalFooter>\n                            <HStack spacing = {4}>\n                                <Button onClick = {onClose}>Zatvori</Button>\n                                <Button\n                                    onClick = {handleSubmit}\n                                    colorScheme = \"blue\"\n                                    disabled = {!title.trim()}\n                                    isLoading = {isSaving}\n                                >\n                                    Postavi\n                                </Button>\n                            </HStack>\n                        </ModalFooter>\n                    </ModalContent>\n                </ModalOverlay>\n            </Modal>\n        </>\n    );\n};\n\nexport default PostNewQuestion;",["43","44"],"/home/elmedin/pitaj.ba/src/components/vote-buttons.js",["45"],"import { IconButton, Text, Textarea, VStack } from \"@chakra-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { FiArrowDown, FiArrowUp} from \"react-icons/fi\";\nimport db from \"../lib/firebase\";\n\nconst VoteButtons = ({ question }) => {\n    const [isVoting, setVoting] = useState(false);\n    const [votedQuestions, setVotedQuestions] = useState([]);\n\n    useEffect(() => {\n        const votesFromLocalStorage = localStorage.getItem(\"votes\") || [];\n        let previousVotes = [];\n\n        try {\n            previousVotes = JSON.parse(votesFromLocalStorage);\n        } catch (error) {\n            console.error(error);\n        }\n\n        setVotedQuestions(previousVotes);\n    }, []);\n\n    const handleDisablingOfVoting = (questionId) => {\n        const previousVotes = votedQuestions;\n        previousVotes.push(questionId);\n\n        setVotedQuestions(previousVotes);\n\n        localStorage.setItem(\"votes\", JSON.stringify(votedQuestions));\n    };\n\n    const handleClick = async (type) => {\n        setVoting(true);\n        \n        // Do calculation to save the vote.\n        let upVotesCount = question.upVotesCount;\n        let downVotesCount = question.downVotesCount;\n\n        const date = new Date();\n\n        if (type === \"upvote\") {\n            upVotesCount = upVotesCount + 1;\n        } else {\n            downVotesCount = downVotesCount + 1;\n        }\n\n        await db.collection(\"questions\").doc(question.id).set({\n            title: question.title,\n            upVotesCount,\n            downVotesCount,\n            createdAt: question.createdAt,\n            updatedAt: date.toUTCString(),\n        });\n        \n        handleDisablingOfVoting(question.id);\n\n        setVoting(false);\n\n    };\n\n    const checkIfQuestionIsAlreadyVoted = () => {\n        if (votedQuestions.indexOf(question.id) > -1) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    return (\n        <>\n            <VStack>\n                <IconButton\n                    size = \"lg\"\n                    colorScheme = \"purple\"\n                    aria-label = \"Upvote\"\n                    icon = {<FiArrowUp />}\n                    onClick = {() => handleClick(\"upvote\")}\n                    isLoading = {isVoting}\n                    isDisabled = {checkIfQuestionIsAlreadyVoted()}\n                />\n                <Text bg = \"gray.100\" rounded = \"md\" w = \"100%\" p = {1}>\n                    {question.upVotesCount}\n                </Text>\n            </VStack>\n            <VStack>\n                <IconButton\n                    size = \"lg\"\n                    colorScheme = \"yellow\"\n                    aria-label = \"Downvote\"\n                    icon = {<FiArrowDown />}\n                    onClick = {() => handleClick(\"downvote\")}\n                    isLoading = {isVoting}\n                    isDisabled = {checkIfQuestionIsAlreadyVoted()}\n                />\n                <Text bg = \"gray.100\" rounded = \"md\" w = \"100%\" p = {1}>\n                    {question.downVotesCount}\n                </Text>\n            </VStack>\n        </>\n    );\n};\n\nexport default VoteButtons;",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":1,"column":21,"nodeType":"52","messageId":"53","endLine":1,"endColumn":25},{"ruleId":"50","severity":1,"message":"54","line":1,"column":27,"nodeType":"52","messageId":"53","endLine":1,"endColumn":34},{"ruleId":"50","severity":1,"message":"55","line":10,"column":5,"nodeType":"52","messageId":"53","endLine":10,"endColumn":18},{"ruleId":"50","severity":1,"message":"56","line":16,"column":27,"nodeType":"52","messageId":"53","endLine":16,"endColumn":36},{"ruleId":"50","severity":1,"message":"57","line":22,"column":22,"nodeType":"52","messageId":"53","endLine":22,"endColumn":31},{"ruleId":"46","replacedBy":"58"},{"ruleId":"48","replacedBy":"59"},{"ruleId":"50","severity":1,"message":"60","line":1,"column":28,"nodeType":"52","messageId":"53","endLine":1,"endColumn":36},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'Flex' is defined but never used.","Identifier","unusedVar","'Spinner' is defined but never used.","'PopoverFooter' is defined but never used.","'useEffect' is defined but never used.","'setSaving' is assigned a value but never used.",["61"],["62"],"'Textarea' is defined but never used.","no-global-assign","no-unsafe-negation"]